<?php

namespace Cars\CoreBundle\Repository;

use Cars\CoreBundle\Entity\UserScoreLog;
use Cars\CoreBundle\Manager\UserScoreLogManagerInterface;

/**
 * UserScoreLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserScoreLogRepository extends \Doctrine\ORM\EntityRepository implements UserScoreLogManagerInterface
{
    public function createScoreLog(array $data)
    {
        $returnArray = array('code'=> -1,'msg'=>'参数错误！','data' => array());
        if((!isset($data['userId']) || empty($data['userId']) || (!isset($data['operScore']) || empty($data['operScore']))))
        {
            return $returnArray;
        }
        try  {
            $userScore = new UserScoreLog();
            foreach ($data as $k=>$v)
            {
                $method = 'set'.ucfirst($k);
                $userScore->$method($v);
            }
            $this->_em->persist($userScore);
            $this->_em->flush($userScore);
            $returnArray['code'] = 0;
            $returnArray['msg'] = '操作成功！';
            $returnArray['data'] = $userScore;
            return $returnArray;
        } catch (\Exception $e) {
            $returnArray['code'] = 2;
            $returnArray['msg'] = '服务器错误！';
            return $returnArray;
        }
    }

    public function getLogBy(array $criteria)
    {
        $qb = $this->createQueryBuilder('us');
        $qb = $this->_getWhere($qb,$criteria);
        $qb->orderBy('us.operAt','DESC');
        $qb->orderBy('us.arriveAt','ASC');
        $result = $qb->getQuery()->getResult();
        return !empty($result) ? $result : array();
    }

    private function _getWhere($qb,$condition = array())
    {
        if(!empty($condition))
        {
            if($condition['scoreType_equal'] == 0) {unset($condition['scoreType_equal']);}
            foreach ($condition as $k=>$v)
            {
                if(isset($k) && !empty($k) && isset($v) && !empty($v))
                {
                    $param  =   explode('_',$k);
                    switch ($param[1]){
                        case 'like':
                            $qb->andWhere('us.'.$param[0].' LIKE :'.$param[0])->setParameter($param[0], '%'.$v.'%');
                            break;
                        case 'equal':
                            $qb->andWhere('us.'.$param[0].' = :'.$param[0])->setParameter($param[0], $v);
                            break;
                        case 'start':
                            $qb->andWhere('us.'.$param[0].' >= :'.$param[0])->setParameter($param[0],strtotime($v));
                            break;
                        case 'end':
                            $qb->andWhere('us.'.$param[0].' <= :'.$param[0].'1')->setParameter($param[0].'1',strtotime($v));
                            break;
                        case 'annlike':
                            $qb->join('us.userId','u','u.id = us.userId');
                            $qb->andWhere('u.'.$param[0].' LIKE :'.$param[0])->setParameter($param[0],'%'.$v.'%');
                            break;

                    }
                }
            }
        }
        return $qb;
    }
}
